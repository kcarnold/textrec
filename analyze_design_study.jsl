trial_all = Open( "/Users/kcarnold/thesis/textrec/data/analyzed/design/trial.csv", Charset( "utf-8" ), ); trial = Subset( trial_all, Rows( trial_all << get rows where( Name( "used-external" ) == "No" ) ) ); trial << Set Name( "Trial-Level" ); Close( trial_all );   trial << New Column( "Abstraction", 	Character, 	Formula( Match( :Name( "conditionName" ), "noprompt", "No Prompt", "questions", "Questions", "verbatim", "Snippets", "??" ) ) );  trial << New Column( "text_len_log", Numeric, Formula( Log( :text_len ) ) );  trial_writing = Subset( trial, Rows( trial << get rows where( Is Missing( :relevance ) | :relevance == "Yes" ) ) );  trial_writing = trial << subset( rows( trial << get rows where( Is Missing( :relevance ) | :relevance == "Yes" ) ) );  trial_timing = Subset( trial, Rows( trial << get rows where( :exclude_from_timing == "False" ) ) ); trial_timing << New Column( "secs_not_typing", Numeric, Formula( Log( :trial_dur_secs - :secs_spent_writing ) ) ); trial_timing << Set Name( "Trial-Level for timing" );   block_timing_summary = trial_timing << Summary( 	Group( :pid, :Abstraction, :blockIdx, :prompt, :confidence, :category_is_relevant ), 	Mean( :secs_not_typing ), 	Freq( "None" ), 	Weight( "None" ), 	statistics column name format( "column" ) );  // People took longer before or after writing when prompts were given. New Window( "Time not writing", 	block_timing_summary << Graph Builder( 		Variables( X( :Abstraction ), Y( :secs_not_typing ) ), 		Elements( Bar( X, Y, Legend( 10 ), Error Bars( "Standard Error" ) ) ) 	),    	block_timing_summary << Fit Model( 		Y( :secs_not_typing ), 		Effects( //		:category_is_relevant, 			:Abstraction, 			:prompt,  //		:category_is_relevant * :Abstraction, 			:confidence 		), 		Random Effects( :pid ), 		NoBounds( 1 ), 		Personality( "Standard Least Squares" ), 		Method( "REML" ), 		Emphasis( "Minimal Report" ), 		Run( 			:secs_not_typing << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), 			Show Prediction Expression( 1 ), Scaled Estimates( 0 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), 			Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Plot Residual by Normal Quantiles( 0 ), 			Show All Confidence Intervals( 1 )} 		) 	) );    block_summary = trial_writing << Summary( 	Group( :pid, :Abstraction, :blockIdx, :prompt, :confidence, :category_is_relevant ), 	Mean( :text_len_log ), 	Mean( :selfReportQuality ), 	Freq( "None" ), 	Weight( "None" ), 	statistics column name format( "column" ) ); block_summary << set name( "block-level summary of trial" );   New Window( "Text length", 	block_summary << Graph Builder( 		Variables( X( :Abstraction ), Y( :text_len_log ) ), 		Elements( Bar( X, Y, Legend( 10 ), Error Bars( "Standard Error" ) ) ),   	),   	block_summary << Fit Model( 		Y( :text_len_log ), 		Effects( :Abstraction, :confidence ), 		Random Effects( :pid, :prompt ), 		NoBounds( 1 ), 		Personality( "Standard Least Squares" ), 		Method( "REML" ), 		Emphasis( "Minimal Report" ), 		Run( 			:text_len_log << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), 			Show Prediction Expression( 1 ), Scaled Estimates( 0 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), 			Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Plot Residual by Normal Quantiles( 0 ), 			Show All Confidence Intervals( 1 ), {:Abstraction << {LSMeans Tukey HSD( 0.05 ), Least Squares Means Plot( Show Connected Points( 0 ) )}} 			} 		), 		SendToReport( 			Dispatch( {"Response text_len_log"}, "Effect Details", OutlineBox, {Close( 0 )} ), 			Dispatch( 				{"Response text_len_log", "Effect Details", "Abstraction", "Least Squares Means Plot"}, 				"Least Squares Means Plot", 				FrameBox, 				{DispatchSeg( BarSeg( 1 ), {Line Color( "Red" ), Line Width( 2 ), Error Bar Cap( "Small" )} )} 			) 		) 	) );    New Window( "Self-Reported Quality", 	block_summary << Graph Builder( 		Variables( X( :Abstraction ), Y( :selfReportQuality ) ), 		Elements( Bar( X, Y, Legend( 10 ), Error Bars( "Standard Error" ) ) ),   	),   	block_summary << Fit Model( 		Y( :selfReportQuality ), 		Effects( :Abstraction, :confidence ), 		Random Effects( :pid, :prompt ), 		NoBounds( 1 ), 		Personality( "Standard Least Squares" ), 		Method( "REML" ), 		Emphasis( "Minimal Report" ), 		Run( 			:selfReportQuality << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), 			Show Prediction Expression( 1 ), Scaled Estimates( 0 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), 			Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Plot Residual by Normal Quantiles( 0 ), 			Show All Confidence Intervals( 1 ), {:Abstraction << {LSMeans Tukey HSD( 0.05 ), Least Squares Means Plot( Show Connected Points( 0 ) )}} 			} 		), 		SendToReport( 			Dispatch( {"Response selfReportQuality"}, "Effect Details", OutlineBox, {Close( 0 )} ), 			Dispatch( 				{"Response selfReportQuality", "Effect Details", "Abstraction", "Least Squares Means Plot"}, 				"Least Squares Means Plot", 				FrameBox, 				{DispatchSeg( BarSeg( 1 ), {Line Color( "Red" ), Line Width( 2 ), Error Bar Cap( "Small" )} )} 			) 		) 	) );    block_all = Open( "/Users/kcarnold/thesis/textrec/data/analyzed/design/block.csv", Charset( "utf-8" ), ); block = Subset( block_all, Rows( block_all << get rows where( Name( "used-external" ) == "No" ) ) ); Close( block_all );  block << New Column( "Abstraction", 	Character, 	Formula( Match( :Name( "conditionName" ), "noprompt", "No Prompt", "questions", "Questions", "verbatim", "Snippets", "??" ) ) );   block << Graph Builder( 	Where( :Abstraction != "No Prompt" ), 	Variables( X( :category_is_relevant ), Y( :n_relevant ), Overlay( :Abstraction ) ), 	Elements( Box Plot( X, Y, Legend( 7 ) ) ) );  block << Fit Model( 	Y( :n_relevant ), 	Effects( :category_is_relevant, :Abstraction, :prompt, :category_is_relevant * :Abstraction ), 	Random Effects( :pid ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		:n_relevant << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), Show Prediction Expression( 1 ), 		Scaled Estimates( 0 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), 		Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 1 ), Show All Confidence Intervals( 1 )} 	), 	SendToReport( Dispatch( {"Response n_relevant"}, "Effect Details", OutlineBox, {Close( 0 )} ) ) );  block << Fit Model( 	Y( :stuck ), 	Where( :n_relevant > 0 ), 	Effects( :Abstraction, :prompt ), 	Random Effects( :pid ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		:n_relevant << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), Show Prediction Expression( 1 ), 		Scaled Estimates( 0 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), 		Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 1 ), Show All Confidence Intervals( 1 )} 	), 	SendToReport( Dispatch( {"Response n_relevant"}, "Effect Details", OutlineBox, {Close( 0 )} ) ) );    exp_all = Open( "/Users/kcarnold/thesis/textrec/data/analyzed/design/exp.csv", Charset( "utf-8" ), );  exp_all << New Column( "easiest to understand", 	Character, 	Formula( Match( :Name( "comparisonRank-understand-most" ), "questions", "Questions", "verbatim", "Snippets", "??" ) ) );  exp_all << New Column( "made it easiest to write", 	Character, 	Formula( Match( :Name( "comparisonRank-generate-most" ), "questions", "Questions", "verbatim", "Snippets", "??" ) ) );  exp_all << New Column( "would most like to have", 	Character, 	Formula( Match( :Name( "comparisonRank-choice-most" ), "questions", "Questions", "verbatim", "Snippets", "??" ) ) );   exp_all << Graph Builder( 	Variables( Y( :easiest to understand ), Y( :made it easiest to write ), Y( :would most like to have ) ), 	Elements( Position( 1, 1 ), Bar( Y, Legend( 17 ) ) ), 	Elements( Position( 1, 2 ), Bar( Y, Legend( 18 ) ) ), 	Elements( Position( 1, 3 ), Bar( Y, Legend( 19 ) ) ), 	SendToReport( 		Dispatch( {}, "Y title", TextEditBox, {Rotate Text( "Horizontal" )} ), 		Dispatch( {}, "Y 1 title", TextEditBox, {Rotate Text( "Horizontal" )} ), 		Dispatch( {}, "Y 2 title", TextEditBox, {Rotate Text( "Horizontal" )} ) 	) );