// Unused formula columns dt << New Column( "mintaps_mean", Numeric, Formula( (mintaps_standard + mintaps_contextual) / 2 ) );  dt << New Column( "num_details_auto", Numeric, Formula( :pos_count_ADJ + :pos_count_NUM + :pos_count_NOUN + :pos_count_VERB + :pos_count_PROPN ) ); dt << New Column( "num_details_auto_log", Numeric, Formula( Log( :num_details_auto ) ) ); dt << New Column( "autodetails_per_word", Numeric, Formula( :num_details_auto / :num_words ) );   // Unused main analysis functions // These could be pulled into the main function by just using extra effects. analyzeByBlock = Function( {response_name, window_title, extra = ""}, 	{s, resp}, 	s = "New Window( \!"" || window_title || "\!", 		dt << Graph Builder( 			Variables( X( :condition ), Y( :" || response_name || 	")), 			Elements( Bar( X, Y, Legend( 4 ), Error Bars( \!"Standard Error\!" ), Label( \!"Label by Value\!" ) ) ), 			SendToReport(  				Dispatch( {}, \!"Y title\!", TextEditBox, {Set Text( \!"" 	 || window_title || 	"\!")} ) , 				Dispatch( {}, \!"graph title\!", TextEditBox, {Set Text( \!"\!" )} ), 			) 		), 		resp = (dt << Summary( 	Group( :experiment, :participant, :block, :condition ), 	Mean( :" 	 || response_name || " ), 	Freq( \!"None\!" ), 	Weight( \!"None\!" ), 	statistics column name format( \!"column\!" ) )) << Fit Model( 			Y( :" 	 || response_name || 	" ), 			Effects( :experiment, :condition, :idx ), 			Random Effects( :participant, :participant * :condition, :stimulus), 			NoBounds( 1 ), 			Personality( \!"Standard Least Squares\!" ), 			Method( \!"REML\!" ), 			Emphasis( \!"Minimal Report\!" ), 			Run( 				Name( \!"" 	 || response_name || 	"\!" ) << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), 				Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 				Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition << 				{LSMeans Tukey HSD( 0.05 )}}} 			), 			SendToReport( Dispatch( \!"Response " 	 || response_name || "\!", \!"Effect Details\!", OutlineBox, {Close( 0 )} ) ), 			" || extra || " 		) 	)"; 	Show( s ); 	Eval( Parse( s ) ); 	resp; );   analyzeWithBaseSpeed = Function( {response_name, window_title}, 	{response_str = "Response " || response_name}, 	(dt << Fit Model( 		Y( As Name( response_name ) ), 		Effects( :experiment, :condition, :idx, chars_per_sec_norecs_log, chars_per_sec_norecs_log * :condition ), 		Random Effects( :participant, :participant * :condition, :stimulus ), 		NoBounds( 1 ), 		Personality( "Standard Least Squares" ), 		Method( "REML" ), 		Emphasis( "Minimal Report" ), 		Run( 			As Name( response_name ) << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), 			Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 			Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition << {LSMeans Tukey HSD( 0.05 ) 			}}} 		), 		SendToReport( Dispatch( response_str, "Effect Details", OutlineBox, {Close( 0 )} ) ) 	)) << Set Window Title( window_title || " x baseline speed" ) );  analyzeWithAllTraits = Function( {response_name, window_title}, 	{response_str = "Response " || response_name}, 	(dt << Fit Model( 		Y( As Name( response_name ) ), 		Effects( 			:experiment, 			:condition, 			:idx, 			chars_per_sec_norecs_log, 			chars_per_sec_norecs_log * :condition, 			:NFC, 			:Extraversion, 			:Openness, 			:Trust, 			:NFC * :condition, 			:Extraversion * :condition, 			:Openness * :condition, 			:Trust * :condition 		), 		Random Effects( :participant, :participant * :condition, :stimulus ), 		NoBounds( 1 ), 		Personality( "Standard Least Squares" ), 		Method( "REML" ), 		Emphasis( "Minimal Report" ), 		Run( 			As Name( response_name ) << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), 			Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 			Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition << {LSMeans Tukey HSD( 0.05 ) 			}}} 		), 		SendToReport( Dispatch( response_str, "Effect Details", OutlineBox, {Close( 0 )} ) ) 	)) << Set Window Title( window_title || " x traits" ) );  analyzeWithNFC = Function( {response_name, window_title}, 	{response_str = "Response " || response_name}, 	(dt << Fit Model( 		Y( As Name( response_name ) ), 		Effects( :experiment, :condition, :idx, chars_per_sec_norecs_log, chars_per_sec_norecs_log * :condition, :NFC, :NFC * :condition, ), 		Random Effects( :participant, :participant * :condition, :stimulus ), 		NoBounds( 1 ), 		Personality( "Standard Least Squares" ), 		Method( "REML" ), 		Emphasis( "Minimal Report" ), 		Run( 			As Name( response_name ) << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), 			Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 			Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition << {LSMeans Tukey HSD( 0.05 ) 			}}} 		), 		SendToReport( Dispatch( response_str, "Effect Details", OutlineBox, {Close( 0 )} ) ) 	)) << Set Window Title( window_title || " x speed+NFC" ) );   /*** Unused main analyses **/ analyze( "mintaps_mean", "Min-Taps average of both rec systems" );  //analyze( "num_chars", "Num Chars" ); //analyze( "chars_per_word", "Chars per Word" ); //analyze( "autodetails_per_word", "Num Details per Word" );  //analyze( "taps_per_word", "Taps per Word" );  analyze( "num_details_auto_log", "Log(Num Details (auto))" );   //analyze( "backspaces_per_char", "backspaces per char" ); //analyze( "num_recs_used_on_mainline", "Recommendation Use Count", "Where( :condition != \!"norecs\!")" );    analyzeWithBaseSpeed( "mintaps_standard", "Ideal Taps per Corrected Word" ); analyzeWithBaseSpeed( "mintaps_std_minus_contextual", "Outcome difference between systems" ); analyzeWithBaseSpeed( "backspaces_per_char", "backspaces per char" ); analyzeWithBaseSpeed( "rec_use_per_word", "Rec Usage Per Word" ); analyzeWithBaseSpeed( "relevant_use_frac", "Relevant Rec Use" );  /* analyzeWithAllTraits( "mintaps_standard", "Ideal Taps per Corrected Word" ); analyzeWithAllTraits( "mintaps_std_minus_contextual", "Outcome difference between systems" ); analyzeWithAllTraits( "chars_per_sec_log", "Characters per Second" ); analyzeWithAllTraits( "backspaces_per_char", "backspaces per char" ); analyzeWithAllTraits( "rec_use_per_word", "Rec Usage Per Word" ); analyzeWithAllTraits( "relevant_use_frac", "Relevant Rec Use" );  analyzeWithNFC( "mintaps_standard", "Ideal Taps per Corrected Word" ); analyzeWithNFC( "mintaps_std_minus_contextual", "Outcome difference between systems" ); analyzeWithNFC( "chars_per_sec_log", "Characters per Second" ); analyzeWithNFC( "backspaces_per_char", "backspaces per char" ); analyzeWithNFC( "rec_use_per_word", "Rec Usage Per Word" ); analyzeWithNFC( "relevant_use_frac", "Relevant Rec Use" ); */     /* (dt << Fit Model( 	Y( :chars_per_sec_log ), 	Effects( :condition, :idx, :chars_per_sec_norecs_log, :chars_per_sec_norecs_log * :condition, ), 	Random Effects( :participant, :participant * :condition, :stimulus ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		:chars_per_sec_log << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), 		Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 		Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 )} 	) )) << Set window title( "simple speed interaction" ); */   /** Unclear how to interpret this one*/ /* (dt << Fit Model( 	By( :chars_per_sec_norecs_mean Tertile ), 	Y( :chars_per_sec_log), //	Where( :experiment == "gc1" & :condition != "norecs" ), 	Effects( :experiment, :condition, :idx, :chars_per_sec_norecs_log ), 	Random Effects( :participant, :participant * :condition, :stimulus ), 	Personality( "Standard Least Squares" ), 	Emphasis( "Minimal Report" ), 	Method( "REML" ), 	Run() )); */  (dt << Fit Model( 	By( :chars_per_sec_norecs_mean Tertile ), 	Y( :chars_per_sec_log ), 	Effects( :experiment, :condition, :idx, :chars_per_sec_norecs_log ), 	Random Effects( :participant, :participant * :condition, :stimulus ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		:chars_per_sec_log << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ), 		Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 		Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition << {LSMeans Tukey HSD( 0.05 )}}} 	), 	SendToReport( Dispatch( response_str, "Effect Details", OutlineBox, {Close( 0 )} ) ) )) << Set Window Title( "Speed Interaction by Tertile" );    /* Fit Model( 	Y( :mintaps_contextual ), 	Effects( 		:experiment, 		:condition, 		:idx, 		:mintaps_standard, 		:mintaps_standard * :condition 	), 	Random Effects( :participant, :participant * :condition, :stimulus ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		:mintaps_contextual << {Summary of Fit( 1 ), Analysis of Variance( 0 ), 		Parameter Estimates( 1 ), Lack of Fit( 0 ), Show Prediction Expression( 1 ), 		Plot Actual by Predicted( 0 ), Plot Regression( 0 ), 		Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), 		Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition 		 << {LSMeans Tukey HSD( 0.05 ), LSMeans Contrast( [0 0 1 -1], {} )}}} 	), 	SendToReport( 		Dispatch( 			{"Response mintaps_contextual"}, 			"Effect Details", 			OutlineBox, 			{Close( 0 )} 		) 	) ) */   analyze( "rec_use_per_word", "Rec Usage Per Word" ); // FIXME: This is a ratio, violates ANOVA assumptions. Needs a glm (maybe ordinal logistic: never, sometimes, always) analyze( "relevant_use_frac", "Relevant Rec Use" );    // Taps per word  Fit Model( 	SendToByGroup( {:chars_per_sec_norecs_mean Tertile == 1} ), 	Y( :taps_per_word 2 ), 	By( :chars_per_sec_norecs_mean Tertile ), 	Effects( :condition, :experiment ), 	Random Effects( :participant, :participant * :condition ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	SendToByGroup( 		{:chars_per_sec_norecs_mean Tertile == 1}, 		Run( 			:taps_per_word 2 << {Summary of Fit( 1 ), Analysis of Variance( 0 ), 			Parameter Estimates( 1 ), Lack of Fit( 0 ), 			Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), 			Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 			Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), 			Show All Confidence Intervals( 1 )} 		) 	), 	SendToByGroup( 		{:chars_per_sec_norecs_mean Tertile == 2}, 		Run( 			:taps_per_word 2 << {Summary of Fit( 1 ), Analysis of Variance( 0 ), 			Parameter Estimates( 1 ), Lack of Fit( 0 ), 			Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), 			Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 			Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), 			Show All Confidence Intervals( 1 )} 		) 	), 	SendToByGroup( 		{:chars_per_sec_norecs_mean Tertile == 3}, 		Run( 			:taps_per_word 2 << {Summary of Fit( 1 ), Analysis of Variance( 0 ), 			Parameter Estimates( 1 ), Lack of Fit( 0 ), 			Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), 			Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 			Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), 			Show All Confidence Intervals( 1 ), {:condition << 			{LSMeans Tukey HSD( 0.05 )}}} 		), 		SendToReport( 			Dispatch( 				{"Response taps_per_word 2 chars_per_sec_norecs_mean Tertile=3"}, 				"Effect Details", 				OutlineBox, 				{Close( 0 )} 			) 		) 	) );  // Process -> Outcome Graph Builder( 	Variables( 		X( :relevant_use_frac ), 		Y( :mintaps_standard ), 		Overlay( :condition ) 	), 	Elements( Points( X, Y, Legend( 5 ) ), Line Of Fit( X, Y, Legend( 7 ) ) ) );   // Backspaces by group Fit Model( 	Y( :backspaces_per_char ), 	Effects( :condition, :experiment ), 	Random Effects( :participant, :participant * :condition ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		:backspaces_per_char << {Summary of Fit( 1 ), Analysis of Variance( 0 ), 		Parameter Estimates( 1 ), Lack of Fit( 0 ), Show Prediction Expression( 1 ), 		Plot Actual by Predicted( 0 ), Plot Regression( 0 ), 		Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), 		Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 )} 	), 	Where( :chars_per_sec_norecs_mean Tertile == 3 ) );   // Details per word Graph Builder( 	Variables( 		X( :condition ), 		Y( 			Transform Column( 				"num_details_auto/num_words", 				Formula( :num_details_auto / :num_words ) 			) 		) 	), 	Elements( Bar( X, Y, Legend( 4 ), Error Bars( "Standard Error" ) ) ) );  /// analyze("corrected_tapstotype_standard");  /// Relationship betewen typing rate and age. Graph Builder( 	Variables( X( :age ), Y( :chars_per_sec_norecs_mean ) ), 	Elements( 		Points( X, Y, Legend( 3 ) ), 		Smoother( X, Y, Legend( 6 ), Lambda( 15.0660706618674 ) ) 	) );   // Relationship between recs used and cog load Graph Builder( 	Size( 585, 500 ), 	Variables( X( :num_recs_used_on_mainline ), Y( :TLX_sum ) ), 	Elements( Points( X, Y, Legend( 3 ) ), Line Of Fit( X, Y, Legend( 5 ) ) ) )      (dt << Graph Builder( 	Legend Position( "Inside Left" ), 	Variables( X( :condition ), Y( :chars_per_sec_ratio_to_norecs ), Overlay( :chars_per_sec_norecs_mean Tertile ) ), 	Elements( Bar( X, Y, Legend( 10 ), Error Bars( "Standard Error" ) ) ), 	Where( :condition != "norecs" ), 	SendToReport( 		Dispatch( {}, "chars_per_sec_ratio_to_norecs", ScaleBox, {Add Ref Line( 1, "Solid", "Black", "", 1 )} ), 		Dispatch( 			{}, 			"400", 			ScaleBox, 			{Legend Model( 10, Level Name( 0, "Slowest Tertile" ), Level Name( 1, "Middle Tertile" ), Level Name( 2, "Fastest Tertile" ) )} 		), 		Dispatch( {}, "400", LegendBox, {Set Title( "Baseline Speed" )} ),   	) )) << set window title( "speed ratio to norecs" );   Wait( 0 );   (dt << Graph Builder( 	Where( :experiment != "gc1" ), 	Variables( X( :condition ), Y( :mintaps_standard ), Y( :mintaps_contextual, Position( 1 ) ) ), 	Elements( Bar( X, Y( 1 ), Y( 2 ), Legend( 15 ), Error Bars( "Standard Error" ), Label( "Label by Value" ) ) ), 	SendToReport( 		Dispatch( {}, "400", ScaleBox, {Legend Model( 15, Level Name( 0, "standard" ), Level Name( 1, "contextual" ) )} ), 		Dispatch( {}, "graph title", TextEditBox, {Set Text( "" )} ), 		Dispatch( {}, "X title", TextEditBox, {Set Text( "Writing Condition" )} ), 		Dispatch( {}, "Y title", TextEditBox, {Set Text( "min taps (system, text)" )} ), 		Dispatch( {}, "400", LegendBox, {Set Title( "System" )} ) 	) )) << set window title( "conformity - no gating" );   dt << Graph Builder( 	Variables( 		X( :condition ), 		Y( Transform Column( "Ideal taps saved", Formula( 1 - :corrected_tapstotype_cond / :num_chars ) ) ), 		Y( Transform Column( "Actual taps saved", Formula( 1 - :num_taps / :num_chars ) ), Position( 1 ) ) 	), 	Elements( Bar( X, Y( 1 ), Y( 2 ), Legend( 7 ), Error Bars( "Standard Error" ) ) ) );  