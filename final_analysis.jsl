dt_all = Open(
	"/Users/kcarnold/code/textrec/data/analyzed/combined_data.csv",
	Charset( "utf-8" ),
	Import Settings(
		End Of Line( CRLF, CR, LF ),
		End Of Field( Comma, CSV( 1 ) ),
		Strip Quotes( 1 ),
		Use Apostrophe as Quotation Mark( 0 ),
		Use Regional Settings( 0 ),
		Scan Whole File( 0 ),
		Treat empty columns as numeric( 0 ),
		CompressNumericColumns( 0 ),
		CompressCharacterColumns( 0 ),
		CompressAllowListCheck( 0 ),
		Labels( 1 ),
		Column Names Start( 1 ),
		Data Starts( 2 ),
		Lines To Read( "All" ),
		Year Rule( "20xx" )
	)
);

// Master data filter
dt = Subset( dt_all, Rows( dt_all << get rows where( :participant != "pr5hff" & :participant != "7q253f" ) ) );
Close( dt_all );
dt << Set Name( "Combined gc1+spec2" );


// Set data types
Column( dt, "stimulus" ) << Data Type( "Character" ) << Modeling Type( "Nominal" );
// "The last level is the level with the highest value order coding; it is the level whose indicator function is not included in the model." (https://www.jmp.com/support/help/14/indicator-parameterization-estimates.shtml)
Column( dt, "condition" ) << Set Property( "Value Ordering", {"gated", "contextual", "standard", "norecs"} );

// Transform columns
quartilify = {/*"NFC", "Extraversion", "Openness", "Trust",*/ "chars_per_sec_norecs_mean"};
For( i = 1, i <= N Items( quartilify ), i++, 
	/*dt << New Column( quartilify[i] || " Quartile",
		Ordinal,
		Formula( 1 + Floor( (4 * (Col Rank( Column( quartilify[i] ), <<tie( "average" ) ) - 1)) / N Row() ) )
	)*/
	dt << New Column( quartilify[i] || " Tertile",
		Ordinal,
		Formula( 1 + Floor( (3 * (Col Rank( Column( quartilify[i] ), <<tie( "average" ) ) - 1)) / N Row() ) )
	)
);

dt << New Column( "taps_per_word", Numeric, Formula( :num_taps / :num_words ) );

dt << New Column( "chars_per_sec_log", Numeric, Formula( Log( :characters_per_sec ) ) );
dt << New Column( "chars_per_sec_norecs_log", Numeric, Formula( Log( :chars_per_sec_norecs_mean ) ) );


dt << New Column( "mintaps_standard", Numeric, Formula( :corrected_tapstotype_standard / :num_words ) );
dt << New Column( "mintaps_contextual", Numeric, Formula( :corrected_tapstotype_contextual / :num_words ) );
dt << New Column( "mintaps_std_minus_contextual", Numeric, Formula( mintaps_standard - mintaps_contextual ) );

dt << New Column( "num_details_auto", Numeric, Formula( :pos_count_ADJ + :pos_count_NUM + :pos_count_NOUN + :pos_count_VERB + :pos_count_PROPN ) );

Wait( 0 );

New Window( "Manipulation Checks",
	dt << Matched Pairs(
		X( :condition ),
		Y( :mintaps_standard, :mintaps_contextual ),
		Plot Dif By Row( 1 ),
		Reference Frame( 0 ),
		Wilcoxon Signed Rank( 1 )
	),
	dt << Graph Builder(
		Variables(
			X( :condition ),
			Y(
				Transform Column(
					"orig_bow_recs_idealuse_cond/orig_bow_recs_offered_cond",
					Formula( :orig_bow_recs_idealuse_cond / :orig_bow_recs_offered_cond )
				)
			)
		),
		Where( :condition != "norecs" ),
		Elements( Bar( X, Y, Legend( 4 ), Error Bars( "Standard Error" ) ) ),
		SendToReport( Dispatch( {}, "Y title", TextEditBox, {Set Text( "Relevance rate (# relevant / # offered)" )} ) )
	)
);

Wait( 0 );


// Main analysis function
analyze = Function( {response_name, window_title},
	{},
	Eval(
		Parse(
			"New Window( \!"" || window_title || "\!",
		dt << Graph Builder(
			Variables( X( :condition ), Y( :" || response_name ||
			")),
			Elements( Bar( X, Y, Legend( 4 ), Error Bars( \!"Standard Error\!" ), Label( \!"Label by Value\!" ) ) ),
			SendToReport( 
				Dispatch( {}, \!"Y title\!", TextEditBox, {Set Text( \!"" || window_title || "\!")} ) ,
				Dispatch( {}, \!"graph title\!", TextEditBox, {Set Text( \!"\!" )} ),
			)
		),
		dt << Fit Model(
			Y( :" || response_name ||
			" ),
			Effects( :experiment, :condition, :idx ),
			Random Effects( :participant, :participant * :condition, :stimulus ),
			NoBounds( 1 ),
			Personality( \!"Standard Least Squares\!" ),
			Method( \!"REML\!" ),
			Emphasis( \!"Minimal Report\!" ),
			Run(
				Name( \!""
			 || response_name ||
			"\!" ) << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ),
				Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ),
				Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition <<
				{LSMeans Tukey HSD( 0.05 )}}}
			),
			SendToReport( Dispatch( \!"Response "
			 || response_name || "\!", \!"Effect Details\!", OutlineBox, {Close( 0 )} ) )
		)
	)"
		)
	)
);

analyzeWithBaseSpeed = Function( {response_name, window_title},
	{response_str = "Response " || response_name},
	(dt << Fit Model(
		Y( As Name( response_name ) ),
		Effects( :experiment, :condition, :idx, chars_per_sec_norecs_log, chars_per_sec_norecs_log * :condition ),
		Random Effects( :participant, :participant * :condition, :stimulus ),
		NoBounds( 1 ),
		Personality( "Standard Least Squares" ),
		Method( "REML" ),
		Emphasis( "Minimal Report" ),
		Run(
			As Name( response_name ) << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ),
			Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ),
			Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition << {LSMeans Tukey HSD( 0.05 )
			}}}
		),
		SendToReport( Dispatch( response_str, "Effect Details", OutlineBox, {Close( 0 )} ) )
	)) << Set Window Title( window_title || " x baseline speed" )
);

analyzeWithAllTraits = Function( {response_name, window_title},
	{response_str = "Response " || response_name},
	(dt << Fit Model(
		Y( As Name( response_name ) ),
		Effects(
			:experiment,
			:condition,
			:idx,
			chars_per_sec_norecs_log,
			chars_per_sec_norecs_log * :condition,
			:NFC,
			:Extraversion,
			:Openness,
			:Trust,
			:NFC * :condition,
			:Extraversion * :condition,
			:Openness * :condition,
			:Trust * :condition
		),
		Random Effects( :participant, :participant * :condition, :stimulus ),
		NoBounds( 1 ),
		Personality( "Standard Least Squares" ),
		Method( "REML" ),
		Emphasis( "Minimal Report" ),
		Run(
			As Name( response_name ) << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ),
			Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ),
			Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition << {LSMeans Tukey HSD( 0.05 )
			}}}
		),
		SendToReport( Dispatch( response_str, "Effect Details", OutlineBox, {Close( 0 )} ) )
	)) << Set Window Title( window_title || " x traits" )
);

analyzeWithNFC = Function( {response_name, window_title},
	{response_str = "Response " || response_name},
	(dt << Fit Model(
		Y( As Name( response_name ) ),
		Effects( :experiment, :condition, :idx, chars_per_sec_norecs_log, chars_per_sec_norecs_log * :condition, :NFC, :NFC * :condition, ),
		Random Effects( :participant, :participant * :condition, :stimulus ),
		NoBounds( 1 ),
		Personality( "Standard Least Squares" ),
		Method( "REML" ),
		Emphasis( "Minimal Report" ),
		Run(
			As Name( response_name ) << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ),
			Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ),
			Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition << {LSMeans Tukey HSD( 0.05 )
			}}}
		),
		SendToReport( Dispatch( response_str, "Effect Details", OutlineBox, {Close( 0 )} ) )
	)) << Set Window Title( window_title || " x speed+NFC" )
);


/*

analyze2 = Function( {response_name, window_title},
	{response_str = "Response " || response_name},
	Eval(Parse("
	(dt << Fit Model(
		Y( Name( " || response_name  || ") ),
		Effects( :experiment, :condition, :idx " || extra_effects || "),
		Random Effects( :participant, :participant * :condition, :stimulus ),
		NoBounds( 1 ),
		Personality( \!"Standard Least Squares\!" ),
		Method( \!"REML\!" ),
		Emphasis( \!"Minimal Report\!" ),
		Run(
			Name( " || response_name  || ") << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ),
			Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ),
			Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition << {LSMeans Tukey HSD( 0.05 )
			}}}
		),
		SendToReport( Dispatch( " || response_str, "Effect Details", OutlineBox, {Close( 0 )} ) )
	)) << Set Window Title( window_title );
);*/





/* Outcome Effects */
gb = dt << Graph Builder(
	Variables( X( :condition ), Y( :mintaps_standard ) ),
	Elements( Bar( X, Y, Legend( 4 ), Error Bars( "Standard Error" ), Label( "Label by Value" ) ) ),
	SendToReport(
		Dispatch( {}, "Graph Builder", OutlineBox, {Set Title( "Ideal Taps per Typo-Corrected Word" )} ),
		Dispatch( {}, "graph title", TextEditBox, {Set Text( "" )} ),
		Dispatch( {}, "X title", TextEditBox, {Set Text( "Condition" )} ),
		Dispatch( {}, "Y title", TextEditBox, {Set Text( "Ideal Taps per Typo-Corrected Word" )} )
	)
);

analyze( "mintaps_standard", "Ideal Taps per Corrected Word" );
analyze( "mintaps_std_minus_contextual", "Outcome difference between systems" );
analyze( "uncorrected_errors_per_char", "Uncorrected Errors per Word" );
analyze( "num_details_auto", "Num Details (auto)" );
analyze( "num_words", "Num Words" );

/** Process Effects */

analyze( "taps_per_word", "Taps per Word" );
analyze( "chars_per_sec_log", "Characters per Second" );
analyze( "backspaces_per_char", "backspaces per char" );

/** Rec usage */

analyze( "rec_use_per_word", "Rec Usage Per Word" );
// FIXME: This is a ratio, violates ANOVA assumptions. Needs a glm (maybe ordinal logistic: never, sometimes, always)
analyze( "relevant_use_frac", "Relevant Rec Use" );


/*** Interactions with baseline speed **/
Wait( 0 );



(dt << Graph Builder(
	Window Title( "Speed Ratio to Norecs" ),
	Legend Position( "Inside Left" ),
	Variables( X( :condition ), Y( :chars_per_sec_ratio_to_norecs ), Overlay( :chars_per_sec_norecs_mean Tertile ) ),
	Elements( Bar( X, Y, Legend( 10 ), Error Bars( "Standard Error" ) ) ),
	Where( :condition != "norecs" ),
	SendToReport(
		Dispatch( {}, "chars_per_sec_ratio_to_norecs", ScaleBox, {Add Ref Line( 1, "Solid", "Black", "", 1 )} ),
		Dispatch(
			{},
			"400",
			ScaleBox,
			{Legend Model( 10, Level Name( 0, "Slowest Tertile" ), Level Name( 1, "Middle Tertile" ), Level Name( 2, "Fastest Tertile" ) )}
		),
		Dispatch( {}, "400", LegendBox, {Set Title( "Baseline Speed" )} ), 

	)
)) << set window title( "speed ratio to norecs" );

(dt << Graph Builder(
	Variables(
		X( :condition ),
		Y( Transform Column( "chars_per_sec_log-chars_per_sec_norecs_log", Formula( :chars_per_sec_log - :chars_per_sec_norecs_log ) ) ),
		Overlay( :chars_per_sec_norecs_mean Tertile )
	),
	Elements( Bar( X, Y, Legend( 17 ), Error Bars( "Standard Error" ) ) ),
	Where( :condition != "norecs" ),
	SendToReport(
		Dispatch(
			{},
			"400",
			ScaleBox,
			{Legend Model( 10, Level Name( 0, "Slowest Tertile" ), Level Name( 1, "Middle Tertile" ), Level Name( 2, "Fastest Tertile" ) )}
		),
		Dispatch( {}, "400", LegendBox, {Set Title( "Baseline Speed" )} ),

	)
	
)) << set window tytle( "speed ratio to norecs log" );

Wait( 0 );

analyzeWithBaseSpeed( "mintaps_standard", "Ideal Taps per Corrected Word" );
analyzeWithBaseSpeed( "mintaps_std_minus_contextual", "Outcome difference between systems" );
analyzeWithBaseSpeed( "chars_per_sec_log", "Characters per Second" );
analyzeWithBaseSpeed( "backspaces_per_char", "backspaces per char" );
analyzeWithBaseSpeed( "rec_use_per_word", "Rec Usage Per Word" );
analyzeWithBaseSpeed( "relevant_use_frac", "Relevant Rec Use" );

/*
analyzeWithAllTraits( "mintaps_standard", "Ideal Taps per Corrected Word" );
analyzeWithAllTraits( "mintaps_std_minus_contextual", "Outcome difference between systems" );
analyzeWithAllTraits( "chars_per_sec_log", "Characters per Second" );
analyzeWithAllTraits( "backspaces_per_char", "backspaces per char" );
analyzeWithAllTraits( "rec_use_per_word", "Rec Usage Per Word" );
analyzeWithAllTraits( "relevant_use_frac", "Relevant Rec Use" );

analyzeWithNFC( "mintaps_standard", "Ideal Taps per Corrected Word" );
analyzeWithNFC( "mintaps_std_minus_contextual", "Outcome difference between systems" );
analyzeWithNFC( "chars_per_sec_log", "Characters per Second" );
analyzeWithNFC( "backspaces_per_char", "backspaces per char" );
analyzeWithNFC( "rec_use_per_word", "Rec Usage Per Word" );
analyzeWithNFC( "relevant_use_frac", "Relevant Rec Use" );
*/




/*
(dt << Fit Model(
	Y( :chars_per_sec_log ),
	Effects( :condition, :idx, :chars_per_sec_norecs_log, :chars_per_sec_norecs_log * :condition, ),
	Random Effects( :participant, :participant * :condition, :stimulus ),
	NoBounds( 1 ),
	Personality( "Standard Least Squares" ),
	Method( "REML" ),
	Emphasis( "Minimal Report" ),
	Run(
		:chars_per_sec_log << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ),
		Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ),
		Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 )}
	)
)) << Set window title( "simple speed interaction" );
*/


/** Unclear how to interpret this one*/
/*
(dt << Fit Model(
	By( :chars_per_sec_norecs_mean Tertile ),
	Y( :chars_per_sec_log),
//	Where( :experiment == "gc1" & :condition != "norecs" ),
	Effects( :experiment, :condition, :idx, :chars_per_sec_norecs_log ),
	Random Effects( :participant, :participant * :condition, :stimulus ),
	Personality( "Standard Least Squares" ),
	Emphasis( "Minimal Report" ),
	Method( "REML" ),
	Run()
));
*/

(dt << Fit Model(
	By( :chars_per_sec_norecs_mean Tertile ),
	Y( :chars_per_sec_log ),
	Effects( :experiment, :condition, :idx, :chars_per_sec_norecs_log ),
	Random Effects( :participant, :participant * :condition, :stimulus ),
	NoBounds( 1 ),
	Personality( "Standard Least Squares" ),
	Method( "REML" ),
	Emphasis( "Minimal Report" ),
	Run(
		:chars_per_sec_log << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), Lack of Fit( 0 ),
		Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ),
		Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), {:condition << {LSMeans Tukey HSD( 0.05 )}}}
	),
	SendToReport( Dispatch( response_str, "Effect Details", OutlineBox, {Close( 0 )} ) )
)) << Set Window Title( "Speed Interaction by Tertile" );

