dt = Open( 	"/Users/kcarnold/code/textrec/data/analyzed/combined_data.csv", 	Charset( "utf-8" ), 	Import Settings( 		End Of Line( CRLF, CR, LF ), 		End Of Field( Comma, CSV( 1 ) ), 		Strip Quotes( 1 ), 		Use Apostrophe as Quotation Mark( 0 ), 		Use Regional Settings( 0 ), 		Scan Whole File( 0 ), 		Treat empty columns as numeric( 0 ), 		CompressNumericColumns( 0 ), 		CompressCharacterColumns( 0 ), 		CompressAllowListCheck( 0 ), 		Labels( 1 ), 		Column Names Start( 1 ), 		Data Starts( 2 ), 		Lines To Read( "All" ), 		Year Rule( "20xx" ) 	) );  // Set data types Column( dt, "stimulus" ) << Data Type( "Character" ) << Modeling Type( "Nominal" );  Column( dt, "condition_mapped" ) << Set Property( "Value Ordering", {"norecs", "gated", "general", "specific"} );   quartilify = {"NFC", "Extraversion", "Openness", "Trust", "chars_per_sec_norecs_mean"}; For( i = 1, i <= N Items( quartilify ), i++, 	dt << New Column( quartilify[i] || " Quartile", 		Ordinal, 		Formula( 1 + Floor( (4 * (Col Rank( Column( quartilify[i] ), <<tie( "average" ) ) - 1)) / N Row() ) ) 	) << New Column( quartilify[i] || " Tertile", 		Ordinal, 		Formula( 1 + Floor( (3 * (Col Rank( Column( quartilify[i] ), <<tie( "average" ) ) - 1)) / N Row() ) ) 	) );   /* gb = dt << Graph Builder( 	Variables( X( :condition_mapped ), Y( :ideal_taps_per_word_corrected ) ), 	Elements( 		Bar( 			X, 			Y, 			Legend( 4 ), 			Error Bars( "Standard Error" ), 			Label( "Label by Value" ) 		) 	), 	Where( :experiment == "gc1" ), 	SendToReport( 		Dispatch( {}, "Graph Builder", OutlineBox, {Set Title( "Ideal Taps per Typo-Corrected Word" )} ), 		Dispatch( {}, "graph title", TextEditBox, {Set Text( "" )} ), 		Dispatch( {}, "X title", TextEditBox, {Set Text( "Condition" )} ), 		Dispatch( 			{}, 			"Y title", 			TextEditBox, 			{Set Text( "Ideal Taps per Typo-Corrected Word" )} 		) 	) ); */  (dt << Fit Model( 	Y( :ideal_taps_per_word_corrected ), 	Where( :experiment == "gc1" ), 	Effects( :condition_mapped, :idx ), 	Random Effects( :participant, :participant * :condition_mapped, :stimulus ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		Profiler( 			1, 			Confidence Intervals( 1 ), 			Term Value( condition_mapped( "norecs", Lock( 0 ), Show( 1 ) ), idx( 5.5, Lock( 0 ), Show( 1 ) ) ) 		), 		:ideal_taps_per_word_corrected << {Summary of Fit( 1 ), Analysis of Variance( 0 ), 		Parameter Estimates( 1 ), Lack of Fit( 0 ), Show Prediction Expression( 1 ), 		Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 		Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 ), 		{:condition_mapped << {LSMeans Tukey HSD( 0.05 )}}} 	), 	SendToReport( 		Dispatch( {"Response ideal_taps_per_word_corrected"}, "Effect Details", OutlineBox, {Close( 0 )} ) 	) )) << Set Window Title( "Ideal Taps per Corrected Word" );     (dt << Fit Model( 	Y( :characters_per_sec ), 	Effects( :condition_mapped, :idx, ), 	Random Effects( :participant, :participant * :condition_mapped, :stimulus ), 	Where( :experiment == "gc1" ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		:characters_per_sec << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), 		Lack of Fit( 0 ), Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), 		Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), 		Show All Confidence Intervals( 1 )} 	) )) << Set window title( "Characters per Second" );    (dt << Fit Model( 	Y( :backspaces_per_char ), 	Effects( :condition_mapped, :idx ), 	Random Effects( :participant, :participant * :condition_mapped, :stimulus ), 	Where( :experiment == "gc1" ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		:backspaces_per_char << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), 		Lack of Fit( 0 ), Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), 		Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), 		Show All Confidence Intervals( 1 ), {:condition_mapped << {LSMeans Tukey HSD( 0.05 )}}} 	), 	SendToReport( Dispatch( {"Response backspaces_per_char"}, "Effect Details", OutlineBox, {Close( 0 )} ) ) )) << set window title( "backspaces per char" );   (dt << Fit Model( 	Y( :chars_per_sec_ratio_to_norecs ), 	Where( :experiment == "gc1" & :condition != "norecs" ), 	Effects( 		:condition_mapped, 		:idx, 		:chars_per_sec_norecs_mean, 		:chars_per_sec_norecs_mean * :condition_mapped,   	), 	Random Effects( :participant, :participant * :condition_mapped, :stimulus ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		:chars_per_sec_ratio_to_norecs << {Summary of Fit( 1 ), Analysis of Variance( 0 ), 		Parameter Estimates( 1 ), Lack of Fit( 0 ), Show Prediction Expression( 1 ), 		Plot Actual by Predicted( 0 ), Plot Regression( 0 ), Plot Residual by Predicted( 0 ), 		Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 )} 	) )) << Set window title( "speed interaction" );  (dt << Fit Model( 	Y( :characters_per_sec ), 	Where( :experiment == "gc1" & :condition != "norecs" ), 	Effects( 		:condition_mapped, 		:idx, 		:chars_per_sec_norecs_mean, 		:chars_per_sec_norecs_mean * :condition_mapped,  	), 	Random Effects( :participant, :participant * :condition_mapped, :stimulus ), 	NoBounds( 1 ), 	Personality( "Standard Least Squares" ), 	Method( "REML" ), 	Emphasis( "Minimal Report" ), 	Run( 		:characters_per_sec << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ), 		Lack of Fit( 0 ), Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ), 		Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ), 		Show All Confidence Intervals( 1 )} 	) )) << Set window title( "simple speed interaction" );   (dt << Fit Model( 	By( :chars_per_sec_norecs_mean Tertile ), 	Y( :chars_per_sec_ratio_to_norecs ), 	Effects( :condition_mapped, :idx, :chars_per_sec_norecs_mean ), 	Random Effects( :participant, :participant * :condition_mapped, :stimulus ), 	Personality( "Standard Least Squares" ), 	Emphasis( "Minimal Report" ), 	Method( "REML" ) ));