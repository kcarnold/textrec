/**
 * TODO:
 * - decide on a consistent set of predictors
 *  -- include participant * condition?
 *  -- include stimulus?
 * - Which traits?
 * - Additional analyses:
 *  -- rate of usage of *relevant* recs
 *  -- error rate
 *  -- Try analyzing effect of condition by quantile of NFC (quartiles) 
 *  -- Typing speed: interaction of condition and base typing speed 
 *  -- Outcome stats by trait
 */

dt = Open(
	"/Users/kcarnold/code/textrec/data/analyzed/combined_traits.csv",
	Charset( "utf-8" ),
	Import Settings(
		End Of Line( CRLF, CR, LF ),
		End Of Field( Comma, CSV( 1 ) ),
		Strip Quotes( 1 ),
		Use Apostrophe as Quotation Mark( 0 ),
		Use Regional Settings( 0 ),
		Scan Whole File( 0 ),
		Treat empty columns as numeric( 0 ),
		CompressNumericColumns( 0 ),
		CompressCharacterColumns( 0 ),
		CompressAllowListCheck( 0 ),
		Labels( 1 ),
		Column Names Start( 1 ),
		Data Starts( 2 ),
		Lines To Read( "All" ),
		Year Rule( "20xx" )
	)
);

// Set data types
Column( dt, "stimulus" ) << Data Type( "Character" ) << Modeling Type( "Nominal" );

Column( dt, "condition_mapped") << Set Property("Value Ordering", {"norecs", "gated", "general", "specific"});


// Create formula columns
quartilify = {"NFC", "Extraversion", "Openness", "Trust", "chars_per_sec_norecs_mean"};
For(i=1, i<=N Items(quartilify), i++, 
	dt << New Column( quartilify[i] || " Quartile",
	Numeric,
	Formula( 1 + Floor( (4 * Col Rank( Column(quartilify[i]), <<tie( "average" ) )) / N Row() ) ))
);

dt << New Column("Ideal Taps per Typo-Corrected Word", Numeric,
			Formula( :corrected_tapstotype_general / :num_words) );

dt << New Column("relevant_recs_offered", Numeric,
	Formula(Maximum(
	:orig_idealrecuse_cond + (:extraneous_inputs -
	:num_tapBackspace * 2),
	0
))); // FIXME: This is a kludge: it mis-counts if you backspaced over text inserted by recommendations.

dt << New Column("relevant_use_frac", Numeric, Formula(Minimum(:num_tapSugg_any / :relevant_recs_offered, 1)));


/**
 * Outcome Effects
 */

// Ideal taps per entered word (with typos)
dt << Fit Model(
	Y( :ideal_taps_per_word ),
	Effects(
		:condition_mapped,
		:NFC,
		:Extraversion,
		:Openness,
		:Trust,
		:NFC * :condition_mapped,
		:Extraversion * :condition_mapped,
		:Openness * :condition_mapped,
		:Trust * :condition_mapped,
		:idx,
		:chars_per_sec_norecs_mean
	),
	Random Effects( :participant ),
	NoBounds( 1 ),
	Personality( "Standard Least Squares" ),
	Method( "REML" ),
	Emphasis( "Minimal Report" ),
	Run(
		:ideal_taps_per_word << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ),
		Lack of Fit( 0 ), Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ),
		Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ),
		Show All Confidence Intervals( 1 )}
	)
);

// Ideal Taps per Typo-Corrected Word
dt << Fit Model(
	Y(
		"Ideal Taps per Typo-Corrected Word",
	),
	Effects( :condition_mapped, :idx ),
	Random Effects( :participant, :participant * :condition_mapped, :stimulus ),
	NoBounds( 1 ),
	Personality( "Standard Least Squares" ),
	Method( "REML" ),
	Emphasis( "Minimal Report" ),
	Run(
		Profiler(
			1,
			Confidence Intervals( 1 ),
			Term Value( condition_mapped( "norecs", Lock( 0 ), Show( 1 ) ), idx( 5.203, Lock( 0 ), Show( 1 ) ) )
		),
		:Name( "Ideal Taps per Typo-Corrected Word" ) << {Summary of Fit( 1 ), Analysis of Variance( 0 ),
		Parameter Estimates( 1 ), Lack of Fit( 0 ), Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ),
		Plot Regression( 0 ), Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ),
		Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 )}
	)/*,
	SendToReport(
    		Dispatch(
    			{"Response corrected_tapstotype_general/num_words",
			"Prediction Profiler"},
			"10000",
			ScaleBox,
			{Min( 1.48737672583826 ), Max( 2.10769230769231 ), Inc( 0.2 ),
			Minor Ticks( 1 )}
		)
	)*/
);

// Graph the above
dt << Graph Builder(
	Variables(
		Y( :ideal_taps_per_word ),
		Y( :Name( "Ideal Taps per Typo-Corrected Word" ) ),
		Overlay( :condition_mapped )
	),
	Where( :experiment == "gc1" ),
	Elements( Position( 1, 1 ), Bar( Y, Legend( 6 ), 			Error Bars( "Standard Error" ),
 Label( "Label by Value" ) ) ),
	Elements(
		Position( 1, 2 ),
		Bar(
			Y,
			Legend( 7 ),
			Error Bars( "Standard Error" ),
			Label( "Label by Value" )
		)
	),
	SendToReport(
		Dispatch(
			{},
			"400",
			ScaleBox,
			{Legend Model(
				7,
				Base( 0, 0, 0 ),
				Base( 1, 0, 0 ),
				Base( 2, 0, 0 ),
				Base( 3, 0, 0 )
			)}
		)
	)
);

/**
 * Behavior Effects
 */

// Full-Word Rec Use Rate
dt << Fit Model(
	Y( :rec_use_full_frac ),
	Where( :condition != "norecs" ),
	Effects( :chars_per_sec_norecs_mean, :block, :idx_in_block, :condition_mapped, :condition_mapped * :block ),
	Random Effects( :participant ),
	NoBounds( 1 ),
	Personality( "Standard Least Squares" ),
	Method( "REML" ),
	Emphasis( "Minimal Report" ),
	Run(
		:rec_use_full_frac << {Title( "Full-Word Rec Use Rate" ), Summary of Fit( 1 ), Analysis of Variance( 0 ),
		Parameter Estimates( 1 ), Lack of Fit( 0 ), Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ),
		Plot Regression( 0 ), Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ),
		Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 )}
	)
);
  
  
// ... including NFC
dt << Fit Model(
	Y( :rec_use_full_frac ),
	Effects(
		:NFC,
		:condition_mapped,
		:chars_per_sec_norecs_mean,
		:condition_mapped * :NFC,
		:block,
		:idx_in_block
	),
	Where( :condition != "norecs" ),
	Random Effects( :participant, :participant * :condition_mapped ),
	NoBounds( 1 ),
	Personality( "Standard Least Squares" ),
	Method( "REML" ),
	Emphasis( "Minimal Report" ),
	Run(
		:rec_use_full_frac << {Summary of Fit( 1 ), Analysis of Variance( 0 ), Parameter Estimates( 1 ),
		Lack of Fit( 0 ), Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ), Plot Regression( 0 ),
		Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 0 ),
		Show All Confidence Intervals( 1 )}
	)
);

// Graph
dt << Graph Builder(
	Size( 585, 532 ),
	Variables( X( :NFC ), Y( :rec_use_full_frac ), Overlay( :condition_mapped ) ),
	Elements( Points( X, Y, Legend( 11 ) ), Line Of Fit( X, Y, Legend( 13 ) ) )
);

// Relevant use rate
dt << Graph Builder(
	Size( 539, 628 ),
	Variables(
		X( :chars_per_sec_norecs_mean ),
		Y( :relevant_use_frac )
	),
	Where( :experiment == "gc1" & :condition_mapped != "norecs" ),
	Elements( Points( X, Y, Legend( 10 ) ), Line Of Fit( X, Y, Legend( 12 ) ) )
);


// Extraneous inputs per word
dt << Fit Model(
	Y( :extraneous_inputs_per_word_boxcox ),
	Where( :condition != "norecs" ),
	Effects(
		:condition_mapped,
		:chars_per_sec_norecs_mean,
		:chars_per_sec_norecs_mean * :condition_mapped,
		:NFC,
		:Extraversion,
		:Openness,
		:Trust,
		:condition_mapped * :NFC,
		:condition_mapped * :Extraversion,
		:condition_mapped * :Openness,
		:condition_mapped * :Trust
	),
	Random Effects( :participant, :participant * :condition_mapped ),
	NoBounds( 1 ),
	Personality( "Standard Least Squares" ),
	Method( "REML" ),
	Emphasis( "Minimal Report" ),
	Run(
		:extraneous_inputs_per_word_boxcox << {Summary of Fit( 1 ), Analysis of Variance( 0 ),
		Parameter Estimates( 1 ), Lack of Fit( 0 ), Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ),
		Plot Regression( 0 ), Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ),
		Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 )}
	)
);


// Speed
dt << Fit Model(
	Y( :chars_per_sec_ratio_to_norecs_boxcox ),
	Where( :condition != "norecs" ),
	Effects(
		:condition_mapped,
		:block,
		:idx_in_block,
		:NFC,
		:Extraversion,
		:Openness,
		:Trust,
		:NFC * :condition_mapped,
		:Extraversion * :condition_mapped,
		:Openness * :condition_mapped,
		:Trust * :condition_mapped
	),
	Random Effects( :participant, :participant * :condition_mapped ),
	NoBounds( 1 ),
	Personality( "Standard Least Squares" ),
	Method( "REML" ),
	Emphasis( "Minimal Report" ),
	Run(
		:chars_per_sec_ratio_to_norecs_boxcox << {Summary of Fit( 1 ), Analysis of Variance( 0 ),
		Parameter Estimates( 1 ), Lack of Fit( 0 ), Show Prediction Expression( 1 ), Plot Actual by Predicted( 0 ),
		Plot Regression( 0 ), Plot Residual by Predicted( 0 ), Plot Studentized Residuals( 0 ),
		Plot Effect Leverage( 0 ), Show All Confidence Intervals( 1 )}
	)
);

dt << Graph Builder(
	Variables(
		X( :chars_per_sec_norecs_mean ),
		Y( :chars_per_sec_ratio_to_norecs ),
		Overlay( :condition_mapped )
	),
	Elements( Points( X, Y, Legend( 7 ) ), Line Of Fit( X, Y, Legend( 9 ) ) )
);

dt << Graph Builder(
	Variables(
		X( :condition_mapped ),
		Y( :chars_per_sec_ratio_to_norecs ),
		Overlay( :chars_per_sec_norecs_mean Quartile )
	),
	Where( :experiment == "gc1" & :condition_mapped != "norecs" ),
	Elements( Bar( X, Y, Legend( 10 ), Error Bars( "Standard Error" ) ) )
);
